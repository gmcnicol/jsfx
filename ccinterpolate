// This script is a MIDI CC Interpolator. It takes an input CC value and interpolates it between a start and end value.
// The interpolated value is then sent out on a specified MIDI channel and CC number.
desc:MIDI CC Interpolator

// Initialize variables
slider1:0<0,127,1>Input CC value
slider2:0<0,127,1>Start Value Out 1
slider3:127<0,127,1>End Value Out 1
slider4:0<0,15,1>MIDI Channel Out 1
slider5:0<0,127,1>CC Number Out 1
slider6:0<0,2,1>Mode Out 1
slider7:0<0,127,1>Start Value Out 2
slider8:127<0,127,1>End Value Out 2
slider9:0<0,15,1>MIDI Channel Out 2
slider10:0<0,127,1>CC Number Out 2
slider11:0<0,2,1>Mode Out 2
slider12:0<0,127,1>Start Value Out 3
slider13:127<0,127,1>End Value Out 3
slider14:0<0,15,1>MIDI Channel Out 3
slider15:0<0,127,1>CC Number Out 3
slider16:0<0,2,1>Mode Out 3
slider17:0<0,127,1>Start Value Out 4
slider18:127<0,127,1>End Value Out 4
slider19:0<0,15,1>MIDI Channel Out 4
slider20:0<0,127,1>CC Number Out 4
slider21:0<0,2,1>Mode Out 4

in_pin:none
out_pin:none

@init
function interpolate(cc, startValue, endValue) (
  startValue + (cc * (endValue - startValue)) / 127;
);

function reverseInterpolate(cc, startValue, endValue) (
  endValue - (cc * (endValue - startValue)) / 127;
);

previousCCValue = -1;

@slider
currentCCValue = slider1;
startValueOut1 = slider2;
endValueOut1 = slider3;
midiChannelOut1 = slider4;
ccNumberOut1 = slider5;
mode1 = slider6;
startValueOut2 = slider7;
endValueOut2 = slider8;
midiChannelOut2 = slider9;
ccNumberOut2 = slider10;
mode2 = slider11;
startValueOut3 = slider12;
endValueOut3 = slider13;
midiChannelOut3 = slider14;
ccNumberOut3 = slider15;
mode3 = slider16;
startValueOut4 = slider17;
endValueOut4 = slider18;
midiChannelOut4 = slider19;
ccNumberOut4 = slider20;
mode4 = slider21;

@block
currentCCValue != previousCCValue ? (
  interpolatedValue1 = mode1 == 1 ? interpolate(currentCCValue, startValueOut1, endValueOut1) : mode1 == 2 ? reverseInterpolate(currentCCValue, startValueOut1, endValueOut1) : -1;
  mode1 != -1 ? midisend(0, 0xB0 | midiChannelOut1, ccNumberOut1, interpolatedValue1) : 0;
  interpolatedValue2 = mode2 == 1 ? interpolate(currentCCValue, startValueOut2, endValueOut2) : mode2 == 2 ? reverseInterpolate(currentCCValue, startValueOut2, endValueOut2) : -1;
  mode2 != -1 ? midisend(0, 0xB0 | midiChannelOut2, ccNumberOut2, interpolatedValue2) : 0;
  interpolatedValue3 = mode3 == 1 ? interpolate(currentCCValue, startValueOut3, endValueOut3) : mode3 == 2 ? reverseInterpolate(currentCCValue, startValueOut3, endValueOut3) : -1;
  mode3 != -1 ? midisend(0, 0xB0 | midiChannelOut3, ccNumberOut3, interpolatedValue3) : 0;
  interpolatedValue4 = mode4 == 1 ? interpolate(currentCCValue, startValueOut4, endValueOut4) : mode4 == 2 ? reverseInterpolate(currentCCValue, startValueOut4, endValueOut4) : -1;
  mode4 != -1 ? midisend(0, 0xB0 | midiChannelOut4, ccNumberOut4, interpolatedValue4) : 0;
  previousCCValue = currentCCValue;
);

@sample
// Per-sample processing code here

@gfx
// GUI code here
